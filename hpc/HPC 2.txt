#include<iostream>
#include<stdlib.h>
#include<omp.h>
using namespace std;
void mergesort(int a[],int i,int j);
void merge(int a[],int i1,int j1,int i2,int j2);
void mergesort(int a[],int i,int j)
{
 int mid;
 if(i<j)
 {
 mid=(i+j)/2;
 #pragma omp parallel sections
 {
 #pragma omp section
 {
 mergesort(a,i,mid);
 }
 #pragma omp section
 {
 mergesort(a,mid+1,j);
 }
 }
 merge(a,i,mid,mid+1,j);
 }
}
void merge(int a[],int i1,int j1,int i2,int j2)
{
 int temp[1000];
 int i,j,k;
 i=i1;
 j=i2;
 k=0;
 while(i<=j1 && j<=j2)
 {
 if(a[i]<a[j])
 {
 temp[k++]=a[i++];
 }
 else
 {
 temp[k++]=a[j++];
}
 }
 while(i<=j1)
 {
 temp[k++]=a[i++];
 }
 while(j<=j2)
 {
 temp[k++]=a[j++];
 }
 for(i=i1,j=0;i<=j2;i++,j++)
 {
 a[i]=temp[j];
 }
}
int main()
{
 int *a,n,i;
 cout<<"\n enter total no of elements=>";
 cin>>n;
 a= new int[n];
 cout<<"\n enter elements=>\n";
 for(i=0;i<n;i++)
 {
 cin>>a[i];
 }
 mergesort(a, 0, n-1);
 cout<<"\n sorted array is=>";
 for(i=0;i<n;i++)
 {
 cout<<"\n"<<a[i];
 }
 return 0;







#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
void swap(int *num1, int *num2);
int main (int argc, char *argv[]) {
int SIZE =1<<8;
int A[SIZE];
for(int i=0;i<SIZE;i++)
{
 A[i]=rand()%SIZE;
}
//int A[5] = {6,9,1,3,7};
int N = SIZE;
int i=0, j=0;
int first;
double start,end;
start=omp_get_wtime();
for( i = 0; i < N-1; i++ )
{
first = i % 2;
#pragma omp parallel for default(none),shared(A,first,N)
for( j = first; j < N-1; j += 1 )
{
if( A[ j ] > A[ j+1 ] )
{
swap( &A[ j ], &A[ j+1 ] );
}
}
}
end=omp_get_wtime();
for(i=0;i<N;i++)
{
printf(" %d",A[i]);
}
printf("\n-------------------------\n Time Parallel= %f",(end-start));
}
void swap(int *num1, int *num2)
{
int temp = *num1;
*num1 = *num2;
*num2 = temp;
}